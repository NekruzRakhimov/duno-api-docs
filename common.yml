openapi: 3.0.2
security:
  - BearerAuth: [ authorized ]

info:
  title: API - Duno Back-End
  description: |-
    This documentation describes all the methods and interfaces available for Duno Back-End
  contact:
    email: nekruzrakhimov@icloud.com
  version: 1.0.0
servers:
  - url: localhost:8787/v1
    description: Local server
tags:
  - name: auth
    description: Endpoints related to authorization
  - name: users
    description: Endpoints related to user profile
  - name: posts
    description: Endpoints related to user posts
paths:
  /auth/otp:
    post:
      security: [ ]
      tags:
        - auth
      summary: Send OTP
      description: Send OTP to provided email in order to confirm it
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRequest"
      responses:
        "200":
          description: "Successfully authenticated"
          content:
            application/json:
              schema:
                type: object
                properties:
                  otp_ttl_seconds:
                    type: integer
                    description: Time to liveof sent OTP
        "400":
          description: Bad request (validation failed)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized (user not found, invalid password, etc.)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/sign-up:
    post:
      security: [ ]
      tags:
        - auth
      summary: Sign Up
      description: Signing up and confirming OTP
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpRequest"
      responses:
        "200":
          description: "Successfully authenticated"
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: Access token
                  refresh_token:
                    type: string
                    description: Refresh token
        "400":
          description: Bad request (validation failed)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized (user not found, invalid password, etc.)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/sign-in:
    post:
      security: [ ]
      tags:
        - auth
      summary: Sign In
      description: Signing up and confirming OTP
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignInRequest"
      responses:
        "200":
          description: "Successfully authenticated"
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: Access token
                  refresh_token:
                    type: string
                    description: Refresh token
        "400":
          description: Bad request (validation failed)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized (user not found, invalid password, etc.)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/refresh:
    get:
      security: [ ]
      tags:
        - auth
      summary: Refesh tokens
      description: Refresh token pair by providing Refresh-Token
      parameters:
        - name: Duno-Refresh-Token
          in: header
          required: true
          description: "Provide Refresh-Token to get new pair of tokens"
          schema:
            type: string
      responses:
        "200":
          description: "Successfully authenticated"
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: Access token
                  refresh_token:
                    type: string
                    description: Refresh token
        "400":
          description: Bad request (validation failed)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized (user not found, invalid password, etc.)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/me:
    get:
      tags:
        - users
      summary: get user info
      description: Get user profile info
      responses:
        "200":
          description: "Successfully authenticated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad request (validation failed)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized (user not found, invalid password, etc.)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - users
      summary: update user profile info
      description: Update user profile fields info
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
      responses:
        "200":
          description: "Successfully authenticated"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User info was updated successfully"
        "400":
          description: Bad request (validation failed)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized (user not found, invalid password, etc.)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/me/password:
    put:
      tags:
        - users
      summary: update user password
      description: Update user password using old password
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserPasswordRequest"
      responses:
        "200":
          description: "Successfully authenticated"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User password was updated successfully"
        "400":
          description: Bad request (validation failed)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized (user not found, invalid password, etc.)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/posts:
    get:
      tags:
        - posts
      summary: Get all posts
      description: Retrieve a list of all posts for the authenticated user.
      responses:
        "200":
          description: Successfully retrieved posts
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: "#/components/schemas/Post"
        "401":
          description: Unauthorized (user not found, invalid session, etc.)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - posts
      summary: Create a new post
      description: Create a new post for the authenticated user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Post"
      responses:
        "201":
          description: Post created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "post created successfully"
        "400":
          description: Bad request (validation failed)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized (user not found, invalid session, etc.)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/posts/{id}:
    get:
      tags:
        - posts
      summary: Retrieve a specific post by ID
      description: Get the details of a post using its unique identifier.
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the post to retrieve
          schema:
            type: integer
      responses:
        "200":
          description: Successfully retrieved the post
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          description: Bad request (invalid ID format)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Post not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - posts
      summary: Update an existing post
      description: Update the details of a post using its unique identifier.
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the post to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Updated Post Title"
                body:
                  type: string
                  example: "This is the updated content of the post."
                is_archived:
                  type: boolean
                  example: false
                is_deleted:
                  type: boolean
                  example: false
              required:
                - title
                - body
      responses:
        "200":
          description: Post updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "post updated successfully"
        "400":
          description: Bad request (validation failed)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized (user not found, invalid session, etc.)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Post not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - posts
      summary: Delete a specific post
      description: Remove a post using its unique identifier.
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the post to delete
          schema:
            type: integer
      responses:
        "200":
          description: Post deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "post deleted successfully"
        "400":
          description: Bad request (invalid ID format)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Post not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/posts/archive/{id}:
    patch:
      tags:
        - posts
      summary: Archive a specific post
      description: Archive a post using its unique identifier.
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the post to archive
          schema:
            type: integer
      responses:
        "200":
          description: Post archived successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "post archived successfully"
        "400":
          description: Bad request (invalid ID format)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Post not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/vacancies:
    get:
      tags:
        - vacancies
      summary: Retrieve all vacancies
      description: Get a list of all vacancies accessible to the authorized user.
      responses:
        "200":
          description: Successfully retrieved list of vacancies
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: "#/components/schemas/Vacancy"
        "401":
          description: Unauthorized (missing or invalid user ID)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - vacancies
      summary: Create a new vacancy
      description: Creates a new vacancy for the authenticated user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VacancyInput"
      responses:
        "201":
          description: Successfully created the vacancy
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "vacancy created successfully"
        "400":
          description: Bad request (invalid input format)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized (user ID missing or invalid)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/vacancies/{id}:
    get:
      tags:
        - vacancies
      summary: Retrieve a specific vacancy by ID
      description: Get the details of a vacancy using its unique identifier.
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the vacancy to retrieve
          schema:
            type: integer
      responses:
        "200":
          description: Successfully retrieved the vacancy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vacancy"
        "400":
          description: Bad request (invalid ID format)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Vacancy not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - vacancies
      summary: Update a specific vacancy by ID
      description: Update the details of a vacancy using its unique identifier.
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the vacancy to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VacancyUpdate"
      responses:
        "200":
          description: Successfully updated the vacancy
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "vacancy updated successfully"
        "400":
          description: Bad request (invalid data format)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Vacancy not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - vacancies
      summary: Delete a specific vacancy by ID
      description: Delete a vacancy using its unique identifier.
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the vacancy to delete
          schema:
            type: integer
      responses:
        "200":
          description: Successfully deleted the vacancy
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "vacancy deleted successfully"
        "400":
          description: Bad request (invalid ID format)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Vacancy not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"


components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

  schemas:
    VacancyUpdate:
      type: object
      properties:
        title:
          type: string
          example: "Senior Software Engineer"
        description:
          type: string
          example: "Develop and maintain web applications, ensuring high performance and responsiveness."
        location:
          type: string
          example: "San Francisco, CA"
        salary:
          type: number
          format: float
          example: 120000.00
        employment_type:
          type: string
          example: "Full-time"
        requirements:
          type: string
          example: "5+ years of experience in software development, proficiency in Golang and JavaScript."
        responsibilities:
          type: string
          example: "Design, develop, and deploy scalable applications."
        expiry_date:
          type: string
          format: date-time
          example: "2024-12-31T23:59:59Z"
        status:
          type: string
          example: "Open"
        remote:
          type: boolean
          example: true
        contact_email:
          type: string
          format: email
          example: "hr@company.com"

    VacancyInput:
      type: object
      required:
        - title
        - description
        - location
        - salary
        - employment_type
        - requirements
        - responsibilities
        - posted_date
        - expiry_date
      properties:
        title:
          type: string
          description: Title of the vacancy
          example: "Product Manager"
        description:
          type: string
          description: Detailed description of the vacancy
          example: "Lead the product team to develop and manage the product roadmap."
        location:
          type: string
          description: Location of the vacancy
          example: "New York, NY"
        salary:
          type: number
          format: float
          description: Salary offered for the vacancy
          example: 95000.00
        employment_type:
          type: string
          description: Type of employment (e.g., full-time, part-time)
          example: "Part-time"
        requirements:
          type: string
          description: Requirements for the vacancy
          example: "3+ years of experience in product management, familiarity with agile methodology."
        responsibilities:
          type: string
          description: Responsibilities of the position
          example: "Define product vision and strategy; manage project lifecycle."
        posted_date:
          type: string
          format: date-time
          description: Date when the vacancy is posted
          example: "2024-10-01T09:00:00Z"
        expiry_date:
          type: string
          format: date-time
          description: Expiration date of the vacancy
          example: "2024-12-31T23:59:59Z"
        status:
          type: string
          description: Status of the vacancy (e.g., open, closed)
          example: "Open"
        remote:
          type: boolean
          description: Indicates if the position is remote
          example: false
        contact_email:
          type: string
          format: email
          description: Contact email for applications
          example: "apply@company.com"

    Vacancy:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the vacancy
          example: 101
        title:
          type: string
          description: Title of the vacancy
          example: "Backend Developer"
        description:
          type: string
          description: Detailed description of the vacancy
          example: "Responsible for building and optimizing backend services."
        company_id:
          type: integer
          description: ID of the company posting the vacancy
          example: 42
        location:
          type: string
          description: Location of the vacancy
          example: "Remote"
        salary:
          type: number
          format: float
          description: Salary offered for the vacancy
          example: 85000.00
        employment_type:
          type: string
          description: Type of employment (e.g., full-time, part-time)
          example: "Contract"
        requirements:
          type: string
          description: Requirements for the vacancy
          example: "Experience with RESTful APIs, proficiency in Golang and SQL."
        responsibilities:
          type: string
          description: Responsibilities of the position
          example: "Develop and maintain backend services for our main application."
        posted_date:
          type: string
          format: date-time
          description: Date when the vacancy was posted
          example: "2024-10-01T09:00:00Z"
        expiry_date:
          type: string
          format: date-time
          description: Date when the vacancy expires
          example: "2024-11-01T23:59:59Z"
        status:
          type: string
          description: Current status of the vacancy (e.g., open, closed)
          example: "Closed"
        remote:
          type: boolean
          description: Indicates if the position is remote
          example: true
        contact_email:
          type: string
          format: email
          description: Contact email for applications
          example: "contact@company.com"
        created_at:
          type: string
          format: date-time
          description: Timestamp of when the record was created
          example: "2024-10-01T09:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: Timestamp of when the record was last updated
          example: "2024-10-20T12:00:00Z"
    Post:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        title:
          type: string
          example: "My First Post"
        body:
          type: string
          example: "This is the body of the post."
        created_at:
          type: string
          format: date-time
          example: "2024-01-01T12:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-02T12:00:00Z"
        is_archived:
          type: boolean
          example: false
        is_deleted:
          type: boolean
          example: false
    UpdateUserPasswordRequest:
      type: object
      properties:
        old_password:
          type: string
          description: "user current password"
          example: "old_password"
        new_password:
          type: string
          description: "user new password"
          example: "new_password"
    UpdateUserRequest:
      type: object
      properties:
        fname:
          type: string
          description: "User's first name"
          example: "Ivan"
        lname:
          type: string
          description: "User's last name"
          example: "Ivanov"
        email:
          type: string
          format: email  # Указывает, что это адрес электронной почты
          description: "User's email"
          example: "test@test.com"
        country:
          type: string
          description: "User's country"
          example: "Russia"
        city:
          type: string
          description: "User's city"
          example: "Moscow"
        state_or_region:
          type: string
          description: "User's state or region"
          example: "Moscow"
        zip:
          type: string
          description: "User's zip code"
          example: "101000"
        most_recent_job_title:
          type: string
          description: "User's most recent job title"
          example: "Developer"
        is_student:
          type: boolean
          description: "Indicates if the user is a student"
          example: false
        looking_for_job:
          type: boolean
          description: "Indicates if the user is looking for a job"
          example: true
        job_titles_of_interest:
          type: array
          items:
            type: string
          description: "List of job titles the user is interested in"
          example: [ "Software Engineer", "Data Analyst" ]
        job_locations_of_interest:
          type: array
          items:
            type: string
          description: "List of job locations the user is interested in"
          example: [ "Saint Petersburg", "Kazan" ]
        is_open_to_remote:
          type: boolean
          description: "Indicates if the user is open to remote work"
          example: true
        get_notified:
          type: boolean
          description: "Indicates if the user wants to receive notifications"
          example: true
    User:
      type: object
      properties:
        id:
          type: integer
          description: "Unique identifier for the user"
          example: 1
        fname:
          type: string
          description: "User's first name"
          example: "Ivan"
        lname:
          type: string
          description: "User's last name"
          example: "Ivanov"
        email:
          type: string
          format: email  # Указывает, что это адрес электронной почты
          description: "User's email"
          example: "test@test.com"
        password:
          type: string
          description: "User's password (optional)"
          example: "securePassword123"
        country:
          type: string
          description: "User's country"
          example: "Russia"
        city:
          type: string
          description: "User's city"
          example: "Moscow"
        state_or_region:
          type: string
          description: "User's state or region"
          example: "Moscow"
        zip:
          type: string
          description: "User's zip code"
          example: "101000"
        most_recent_job_title:
          type: string
          description: "User's most recent job title"
          example: "Developer"
        is_student:
          type: boolean
          description: "Indicates if the user is a student"
          example: false
        looking_for_job:
          type: boolean
          description: "Indicates if the user is looking for a job"
          example: true
        job_titles_of_interest:
          type: array
          items:
            type: string
          description: "List of job titles the user is interested in"
          example: [ "Software Engineer", "Data Analyst" ]
        job_locations_of_interest:
          type: array
          items:
            type: string
          description: "List of job locations the user is interested in"
          example: [ "Saint Petersburg", "Kazan" ]
        is_open_to_remote:
          type: boolean
          description: "Indicates if the user is open to remote work"
          example: true
        get_notified:
          type: boolean
          description: "Indicates if the user wants to receive notifications"
          example: true
        created_at:
          type: string
          format: date-time
          description: "Timestamp when the user was created"
          example: "2023-10-07T12:34:56Z"
        updated_at:
          type: string
          format: date-time
          description: "Timestamp when the user was last updated"
          example: "2023-10-07T12:34:56Z"

    SignUpRequest:
      type: object
      properties:
        otp:
          type: string
          description: "One-time password for authentication"
          example: "123456"
        fname:
          type: string
          description: "User's first name"
          example: "Ivan"
        lname:
          type: string
          description: "User's last name"
          example: "Ivanov"
        email:
          type: string
          description: "User's email"
          example: "test@test.com"
        password:
          type: string
          description: "User's password"
          example: "securePassword123"
        country:
          type: string
          description: "User's country"
          example: "Russia"
        city:
          type: string
          description: "User's city"
          example: "Moscow"
        state_or_region:
          type: string
          description: "User's state or region"
          example: "Moscow"
        zip:
          type: string
          description: "User's zip code"
          example: "101000"
        most_recent_job_title:
          type: string
          description: "User's most recent job title"
          example: "Developer"
        is_student:
          type: boolean
          description: "Indicates if the user is a student"
          example: false
        looking_for_job:
          type: boolean
          description: "Indicates if the user is looking for a job"
          example: true
        job_titles_of_interest:
          type: array
          items:
            type: string
          description: "List of job titles the user is interested in"
          example: [ "Software Engineer", "Data Analyst" ]
        job_locations_of_interest:
          type: array
          items:
            type: string
          description: "List of job locations the user is interested in"
          example: [ "Saint Petersburg", "Kazan" ]
        is_open_to_remote:
          type: boolean
          description: "Indicates if the user is open to remote work"
          example: true
        get_notified:
          type: boolean
          description: "Indicates if the user wants to receive notifications"
          example: true
    AuthRequest:
      type: object
      properties:
        email:
          type: string
          description: "User's email"
          example: "test@test.com"
    SignInRequest:
      type: object
      properties:
        email:
          type: string
          description: "User's email"
          example: "test@test.com"
        password:
          type: string
          description: "User's password"
          example: "test_password"
    Error:
      type: object
      properties:
        error:
          type: string
          description: String represents a set of errors occurred split by '\n'
          example: "Errors.Error1\\nErrors.Error2\\nexplanation text"
